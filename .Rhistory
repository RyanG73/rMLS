final <- tibble::add_column(final, season = season, .before = 2)
final$season <- season
total <- dplyr::bind_rows(total,final)
Sys.sleep(1)
print(season)
}
oldValue <- c("Atlanta","Chicago","Colorado","Columbus","Houston","Miami","Minnesota"
,"Montreal","Nashville","New England","NY Red Bulls","NYCFC",
"Orlando City","Philadelphia","Portland","San Jose","Seattle","Sporting KC",
"Vancouver","KC Wizards","MetroStars","Dallas","KC Wiz")
newValue <- c("Atlanta United FC","Chicago Fire FC","Colorado Rapids","Columbus Crew SC",
"Houston Dynamo","Inter Miami CF","Minnesota United FC","CF Montreal","Nashville SC",
"New England Revolution","New York Red Bulls","New York City FC",
"Orlando City SC","Philadelphia Union","Portland Timbers","San Jose Earthquakes",
"Seattle Sounders FC","Sporting Kansas City","Vancouver Whitecaps FC","Sporting Kansas City",
"New York Red Bulls","FC Dallas","Sporting Kansas City")
suppressWarnings({total$squad <- plyr::mapvalues(total$squad, oldValue, newValue)})
total$squad <- ifelse((total$squad == "Inter Miami CF") & (total$season < 2019),"defunct Miami",total$squad)
return(total)
}
team <- team_stats()
390*217
team_stats <- function(start_season=1996,end_season=2020,teamid=NULL){
total <- tibble::tibble()
season_table <- rMLS::seasons
season_table <- season_table %>% dplyr::filter(Season != 2021) %>%
dplyr::filter(Season >= start_season) %>%
dplyr::filter(Season <= end_season)
if (!is.null(teamid)) {
season_table <- season_table %>% filter(team_id == teamid)
}
for(i in 1:nrow(season_table)){
id <- season_table[[i,7]]
season <- season_table[[i,1]]
URL <- paste0("https://fbref.com/en/comps/22/",id,"/",season,"-Major-League-Soccer-Stats")
html_doc <- URL %>% xml2::read_html()
# 1 "#stats_squads_standard_for"
one <- c("VarSquad", "Var Pl", "VarAge", "VarPoss", "PlayingTimeMP",
"PlayingTimeStarts", "PlayingTimeMin", "PlayingTimes", "PerformanceGls",
"PerformanceAst", "PerformanceGPK", "PerformancePK", "PerformancePKatt",
"PerformanceCrdY", "PerformanceCrdR", "PerMinutesGls", "PerMinutesAst",
"PerMinutesGA", "PerMinutesGPK", "PerMinutesGAPK", "ExpectedxG",
"ExpectednpxG", "ExpectedxA", "ExpectednpxGxA", "PerMinutesxG",
"PerMinutesxA", "PerMinutesxGxA", "PerMinutesnpxG", "PerMinutesnpxGxA")
one <- tibble::as_tibble(sapply(one, function(x) character()))
table <- html_doc %>% rvest::html_nodes("#stats_squads_standard_for")
table1 <- table %>% rvest::html_table()
df <- as.data.frame(table1)
names(df) <- paste0(names(df), df[1, ])
names(df) <- stringr::str_replace_all(names(df), "%", "pct")
names(df) <- gsub("[[:punct:]]|[[:digit:]]|^http:\\/\\/.*|^https:\\/\\/.*","",names(df))
df <- df[-1,]
one <- plyr::rbind.fill(one,df)
# 2 "#stats_squads_keeper_for"
two <- c("VarSquad", "Var Pl", "PlayingTimeMP", "PlayingTimeStarts",
"PlayingTimeMin", "PlayingTimeninetys", "PerformanceGA", "PerformanceGAninety",
"PerformanceSoTA", "PerformanceSaves", "PerformanceSavepct",
"PerformanceW", "PerformanceD", "PerformanceL", "PerformanceCS",
"PerformanceCSpct", "PenaltyKicksPKatt", "PenaltyKicksPKA", "PenaltyKicksPKsv",
"PenaltyKicksPKm", "PenaltyKicksSavepct")
two <- tibble::as_tibble(sapply(two, function(x) character()))
table <- html_doc %>% rvest::html_nodes("#stats_squads_keeper_for")
table1 <- table %>% rvest::html_table()
df <- as.data.frame(table1)
names(df) <- paste0(names(df), df[1, ])
names(df) <- stringr::str_replace_all(names(df), "%", "pct")
names(df) <- stringr::str_replace_all(names(df), "90", "ninety")
names(df) <- gsub("[[:punct:]]|[[:digit:]]|^http:\\/\\/.*|^https:\\/\\/.*","",names(df))
df <- df[-1,]
two <- plyr::rbind.fill(two,df)
# 3 "#stats_squads_keeper_adv_for"
three <- c("VarSquad", "Var Pl", "Varninetys", "GoalsGA", "GoalsPKA",
"GoalsFK", "GoalsCK", "GoalsOG", "ExpectedPSxG", "ExpectedPSxGSoT",
"ExpectedPSxGplusminus", "Expectedninety", "LaunchedCmp", "LaunchedAtt",
"LaunchedCmppct", "PassesAtt", "PassesThr", "PassesLaunchpct",
"PassesAvgLen", "GoalKicksAtt", "GoalKicksLaunchpct", "GoalKicksAvgLen",
"CrossesOpp", "CrossesStp", "CrossesStppct", "SweeperOPA", "SweeperOPAninety",
"SweeperAvgDist")
three <- tibble::as_tibble(sapply(three, function(x) character()))
table <- html_doc %>% rvest::html_nodes("#stats_squads_keeper_adv_for")
table1 <- table %>% rvest::html_table()
df <- as.data.frame(table1)
names(df) <- paste0(names(df), df[1, ])
names(df) <- stringr::str_replace_all(names(df), "-", "_plus_minus")
names(df) <- stringr::str_replace_all(names(df), "%", "pct")
names(df) <- stringr::str_replace_all(names(df), "90", "ninety")
names(df) <- gsub("[[:punct:]]|[[:digit:]]|^http:\\/\\/.*|^https:\\/\\/.*","",names(df))
df <- df[-1,]
three <- plyr::rbind.fill(three,df)
# 4 "#stats_squads_shooting_for"
four <- c("VarSquad", "Var Pl", "Varninetys", "StandardGls", "StandardSh",
"StandardSoT", "StandardSoTpct", "StandardShninety", "StandardSoTninety",
"StandardGSh", "StandardGSoT", "StandardDist", "StandardFK",
"StandardPK", "StandardPKatt", "ExpectedxG", "ExpectednpxG",
"ExpectednpxGSh", "ExpectedGplusminusxG", "ExpectednpGplusminusxG")
four <- tibble::as_tibble(sapply(four, function(x) character()))
table <- html_doc %>% rvest::html_nodes("#stats_squads_shooting_for")
table1 <- table %>% rvest::html_table()
df <- as.data.frame(table1)
names(df) <- paste0(names(df), df[1, ])
names(df) <- stringr::str_replace_all(names(df), "-", "_plus_minus")
names(df) <- stringr::str_replace_all(names(df), "%", "pct")
names(df) <- stringr::str_replace_all(names(df), "90", "ninety")
names(df) <- gsub("[[:punct:]]|[[:digit:]]|^http:\\/\\/.*|^https:\\/\\/.*","",names(df))
df <- df[-1,]
four <- plyr::rbind.fill(four,df)
# 5 "#stats_squads_passing_for"
five <- c("VarSquad", "Var Pl", "Varninetys", "TotalCmp", "TotalAtt",
"TotalCmppct", "TotalTotDist", "TotalPrgDist", "ShortCmp", "ShortAtt",
"ShortCmppct", "MediumCmp", "MediumAtt", "MediumCmppct", "LongCmp",
"LongAtt", "LongCmppct", "VarAst", "VarxA", "VarAplusminusxA",
"VarKP", "Var", "VarPPA", "VarCrsPA", "VarProg")
five <- tibble::as_tibble(sapply(five, function(x) character()))
table <- html_doc %>% rvest::html_nodes("#stats_squads_passing_for")
table1 <- table %>% rvest::html_table()
df <- as.data.frame(table1)
names(df) <- paste0(names(df), df[1, ])
names(df) <- stringr::str_replace_all(names(df), "-", "_plus_minus")
names(df) <- stringr::str_replace_all(names(df), "%", "pct")
names(df) <- stringr::str_replace_all(names(df), "90", "ninety")
names(df) <- gsub("[[:punct:]]|[[:digit:]]|^http:\\/\\/.*|^https:\\/\\/.*","",names(df))
df <- df[-1,]
five <- plyr::rbind.fill(five,df)
# 6 "#stats_squads_passing_types_for"
six <- c("VarSquad", "Var Pl", "Varninetys", "VarAtt", "PassTypesLive",
"PassTypesDead", "PassTypesFK", "PassTypesTB", "PassTypesPress",
"PassTypesSw", "PassTypesCrs", "PassTypesCK", "CornerKicksIn",
"CornerKicksOut", "CornerKicksStr", "HeightGround", "HeightLow",
"HeightHigh", "BodyPartsLeft", "BodyPartsRight", "BodyPartsHead",
"BodyPartsTI", "BodyPartsOther", "OutcomesCmp", "OutcomesOff",
"OutcomesOut", "OutcomesInt", "OutcomesBlocks")
six <- tibble::as_tibble(sapply(six, function(x) character()))
table <- html_doc %>% rvest::html_nodes("#stats_squads_passing_types_for")
table1 <- table %>% rvest::html_table()
df <- as.data.frame(table1)
names(df) <- paste0(names(df), df[1, ])
names(df) <- stringr::str_replace_all(names(df), "-", "_plus_minus")
names(df) <- stringr::str_replace_all(names(df), "%", "pct")
names(df) <- stringr::str_replace_all(names(df), "90", "ninety")
names(df) <- gsub("[[:punct:]]|[[:digit:]]|^http:\\/\\/.*|^https:\\/\\/.*","",names(df))
df <- df[-1,]
six <- plyr::rbind.fill(six,df)
# 7 "#stats_squads_gca_for"
seven <- c("VarSquad", "Var Pl", "Varninetys", "SCASCA", "SCASCAninety",
"SCATypesPassLive", "SCATypesPassDead", "SCATypesDrib", "SCATypesSh",
"SCATypesFld", "SCATypesDef", "GCAGCA", "GCAGCAninety", "GCATypesPassLive",
"GCATypesPassDead", "GCATypesDrib", "GCATypesSh", "GCATypesFld",
"GCATypesDef", "GCATypesOG")
seven <- tibble::as_tibble(sapply(seven, function(x) character()))
table <- html_doc %>% rvest::html_nodes("#stats_squads_gca_for")
table1 <- table %>% rvest::html_table()
df <- as.data.frame(table1)
names(df) <- paste0(names(df), df[1, ])
names(df) <- stringr::str_replace_all(names(df), "-", "_plus_minus")
names(df) <- stringr::str_replace_all(names(df), "%", "pct")
names(df) <- stringr::str_replace_all(names(df), "90", "ninety")
names(df) <- gsub("[[:punct:]]|[[:digit:]]|^http:\\/\\/.*|^https:\\/\\/.*","",names(df))
df <- df[-1,]
seven <- plyr::rbind.fill(seven,df)
# 8 "#stats_squads_defense_for"
eight <- c("VarSquad", "Var Pl", "Varninetys", "TacklesTkl", "TacklesTklW",
"TacklesDef rd", "TacklesMid rd", "TacklesAtt rd", "VsDribblesTkl",
"VsDribblesAtt", "VsDribblesTklpct", "VsDribblesPast", "PressuresPress",
"PressuresSucc", "Pressurespct", "PressuresDef rd", "PressuresMid rd",
"PressuresAtt rd", "BlocksBlocks", "BlocksSh", "BlocksShSv",
"BlocksPass", "VarInt", "VarTklInt", "VarClr", "VarErr")
eight <- tibble::as_tibble(sapply(eight, function(x) character()))
table <- html_doc %>% rvest::html_nodes("#stats_squads_defense_for")
table1 <- table %>% rvest::html_table()
df <- as.data.frame(table1)
names(df) <- paste0(names(df), df[1, ])
names(df) <- stringr::str_replace_all(names(df), "-", "_plus_minus")
names(df) <- stringr::str_replace_all(names(df), "%", "pct")
names(df) <- stringr::str_replace_all(names(df), "90", "ninety")
names(df) <- gsub("[[:punct:]]|[[:digit:]]|^http:\\/\\/.*|^https:\\/\\/.*","",names(df))
df <- df[-1,]
eight <- plyr::rbind.fill(eight,df)
# 9 "#stats_squads_possession_for"
nine <- c("VarSquad", "Var Pl", "VarPoss", "Varninetys", "TouchesTouches",
"TouchesDef Pen", "TouchesDef rd", "TouchesMid rd", "TouchesAtt rd",
"TouchesAtt Pen", "TouchesLive", "DribblesSucc", "DribblesAtt",
"DribblesSuccpct", "DribblesPl", "DribblesMegs", "CarriesCarries",
"CarriesTotDist", "CarriesPrgDist", "CarriesProg", "Carries",
"CarriesCPA", "CarriesMis", "CarriesDis", "ReceivingTarg", "ReceivingRec",
"ReceivingRecpct", "ReceivingProg")
nine <- tibble::as_tibble(sapply(nine, function(x) character()))
table <- html_doc %>% rvest::html_nodes("#stats_squads_possession_for")
table1 <- table %>% rvest::html_table()
df <- as.data.frame(table1)
names(df) <- paste0(names(df), df[1, ])
names(df) <- stringr::str_replace_all(names(df), "-", "_plus_minus")
names(df) <- stringr::str_replace_all(names(df), "%", "pct")
names(df) <- stringr::str_replace_all(names(df), "90", "ninety")
names(df) <- gsub("[[:punct:]]|[[:digit:]]|^http:\\/\\/.*|^https:\\/\\/.*","",names(df))
df <- df[-1,]
nine <- plyr::rbind.fill(nine,df)
# 10 "#stats_squads_playing_time_for"
ten <- c("VarSquad", "Var Pl", "VarAge", "PlayingTimeMP", "PlayingTimeMin",
"PlayingTimeMnMP", "PlayingTimeMinpct", "PlayingTimeninetys",
"StartsStarts", "StartsMnStart", "StartsCompl", "SubsSubs", "SubsMnSub",
"SubsunSub", "TeamSuccessPPM", "TeamSuccessonG", "TeamSuccessonGA",
"TeamSuccessplusminus", "TeamSuccessplusminusninety", "TeamSuccessxGonxG",
"TeamSuccessxGonxGA", "TeamSuccessxGxGplusminus", "TeamSuccessxGxGplusminusninety")
ten <- tibble::as_tibble(sapply(ten, function(x) character()))
table <- html_doc %>% rvest::html_nodes("#stats_squads_playing_time_for")
table1 <- table %>% rvest::html_table()
df <- as.data.frame(table1)
names(df) <- paste0(names(df), df[1, ])
names(df) <- stringr::str_replace_all(names(df), "-", "_plus_minus")
names(df) <- stringr::str_replace_all(names(df), "%", "pct")
names(df) <- stringr::str_replace_all(names(df), "90", "ninety")
names(df) <- gsub("[[:punct:]]|[[:digit:]]|^http:\\/\\/.*|^https:\\/\\/.*","",names(df))
df <- df[-1,]
ten <- plyr::rbind.fill(ten,df)
# 11 "#stats_squads_misc_for"
eleven <- c("VarSquad", "Var Pl", "Varninetys", "PerformanceCrdY", "PerformanceCrdR",
"PerformanceTwoCrdY", "PerformanceFls", "PerformanceFld", "PerformanceOff",
"PerformanceCrs", "PerformanceInt", "PerformanceTklW", "PerformancePKwon",
"PerformancePKcon", "PerformanceOG", "PerformanceRecov", "AerialDuelsWon",
"AerialDuelsLost", "AerialDuelsWonpct")
eleven <- tibble::as_tibble(sapply(eleven, function(x) character()))
table <- html_doc %>% rvest::html_nodes("#stats_squads_misc_for")
table1 <- table %>% rvest::html_table()
df <- as.data.frame(table1)
names(df) <- paste0(names(df), df[1, ])
names(df) <- stringr::str_replace_all(names(df), "-", "_plus_minus")
names(df) <- stringr::str_replace_all(names(df), "%", "pct")
names(df) <- stringr::str_replace_all(names(df), "90", "ninety")
names(df) <- stringr::str_replace_all(names(df), "2C", "TwoC")
names(df) <- gsub("[[:punct:]]|[[:digit:]]|^http:\\/\\/.*|^https:\\/\\/.*","",names(df))
df <- df[-1,]
eleven <- plyr::rbind.fill(eleven,df)
# COMBINE
final <- merge(one, two, by =0, all = TRUE, suffixes = c("tbl1","tbl2"),sort=FALSE)
final$Row.names <- NULL
final <- merge(final, three, by =0, all = TRUE,suffixes = c("","tbl3"),sort=FALSE)
final$Row.names <- NULL
final <- merge(final, four, by =0, all = TRUE,suffixes = c("","tbl4"),sort=FALSE)
final$Row.names <- NULL
final <- merge(final, five, by =0, all = TRUE,suffixes = c("","tbl5"),sort=FALSE)
final$Row.names <- NULL
final <- merge(final, six, by =0, all = TRUE,suffixes = c("","tbl6"),sort=FALSE)
final$Row.names <- NULL
final <- merge(final, seven, by =0, all = TRUE,suffixes = c("","tbl7"),sort=FALSE)
final$Row.names <- NULL
final <- merge(final, eight, by =0, all = TRUE,suffixes = c("","tbl8"),sort=FALSE)
final$Row.names <- NULL
final <- merge(final, nine, by =0, all = TRUE,suffixes = c("","tbl9"),sort=FALSE)
final$Row.names <- NULL
final <- merge(final, ten, by =0, all = TRUE,suffixes = c("","tbl10"),sort=FALSE)
final$Row.names <- NULL
final <- merge(final, eleven, by =0, all = TRUE,suffixes = c("","tbl11"),sort=FALSE)
final$Row.names <- NULL
l1 <- c("squad", "players_used", "avg_age", "possession", "matches_played",
"starts", "minutes", "90s", "goals",
"assists", "non_penalty_goals", "penalty_goals", "penalties_attempted",
"yellow_cards", "red_cards", "goals_per90", "assists_per90",
"goals_and_assists_per90", "non_penalty_goals_per90", "non_penalty_goals_and_assists_per90", "expected_goals",
"expected_non_penalty_goals", "expected_assists", "expected_non_penalty_goals_and_assists", "expected_goals_per90",
"expected_assists_per90", "expected_goals_and_assists_per90", "expected_non_penalty_goals_per90", "expected_non_penalty_goals_and_assists_per90")
l2 <- c("squad", "keepers_used", "matches_played", "keeper_starts",
"keeper_minutes", "90s", "goals_against", "goals_against_per90",
"shots_on_target_against", "saves", "save_pct",
"wins", "draws", "losses", "clean_sheets",
"clean_sheet_pct", "penalties_attempted_against", "penalties_converted_against", "penalties_saved",
"penalties_missed", "penalty_save_pct")
l3 <- c("squad", "keepers_used", "90s", "goals_against", "penalties_attempted_against",
"free_kick_goals_against", "corner_kick_goals_against", "own_goals_against", "expected_goals_against", "expected_goals_against_per_shot_on_target",
"expected_goals_against_minus_goals_allowed", "expected_goals_against_minus_goals_allowed_per90", "keeper_long_passes_completed", "keeper_long_passes_attempted",
"keeper_long_passes_completion_pct", "keeper_passes_attempted", "keeper_throws_attempted", "keeper_long_pass_pct",
"keeper_avg_pass_length", "goal_kicks_attempted", "goal_kick_long_pct", "goal_kick_avg_length",
"crosses_attempted_against", "keeper_crosses_stopped", "keeper_crosses_stop_pct", "keeper_actions_outside18", "keeper_actions_outside18_per90",
"keeper_actions_avg_distance_from_goal")
l4 <- c("squad", "players_used", "90s", "goals", "shots",
"shots_on_target", "shots_on_target_pct", "shots_per90", "shots_on_target_per90",
"goals_per_shot", "goals_per_shot_on_target", "avg_distance_shot", "shots_free_kick",
"penalties_converted", "penalties_attempted", "expected_goals", "expected_non_penalty_goals",
"expected_non_penalty_goals_per_shot", "goals_minus_expected_goals", "non_penalty_goals_minus_expected_goals")
l5 <- c("squad", "players_used", "90s", "passes_completed", "passes_attempted",
"pass_completion_ct", "pass_total_distance", "pass_progressive_distance", "short_passes_completed", "short_passes_attempted",
"short_pass_completion_pct", "medium_passes_completed", "medium_passes_attempted", "medium_pass_completion_pct", "long_passes_completed",
"long_passes_attempted", "long_pass_completion_pct", "assists", "expected_assists", "assists_minus_expected_assists",
"key_passes", "passes_attacking_third", "passes_into_18box", "crosses_into_18box", "progressive_passes")
l6 <- c("squad", "players_used", "90s", "passes_attempted",
"passes_live_ball","passes_dead_ball", "passes_free_kick", "passes_through_ball", "passes_under_press",
"passes_pitch_wide", "crosses", "corner_kicks", "corners_inswinging",
"corners_outswinging", "corners_straight", "passes_ground_level", "passes_low",
"passes_high", "passes_left_foot", "passes_right_foot", "passes_head",
"passes_throw_in", "passes_other_body_part", "passes_completed", "passes_offside",
"passes_out_of_bounds", "passes_intercepted", "passes_blocked")
l7 <- c("squad", "players_used", "90s", "shot_creating_actions", "shot_creating_actions_per90",
"shot_creating_passes_live_ball", "shot_creating_passes_dead_ball", "shot_creating_Dribbles", "shot_creating_rebounds",
"shot_creating_fouls_drawn", "shot_creating_defensive_actions", "goal_creating_actions", "goal_creating_actions_per90", "goal_creating_passes_live_ball",
"goal_creating_passes_dead_ball", "goal_creating_dribbles", "goal_creating_rebounds", "goal_creating_fouls_drawn",
"goal_creating_defensive_actions", "goal_creating_own_goals_for")
l8 <- c("squad", "players_used", "90s", "tackles", "tackles_won",
"tackles_defensive_third", "tackles_middle_third", "tackles_attacking_third", "dribbler_tackles_success",
"dribbler_tackles_attemmpted", "dribbler_tackle_success_pct", "tackles_missed", "pressures_applied",
"pressure_success", "pressure_success_pct", "pressures_defensive_third", "pressures_middle_third",
"pressures_attacking_third", "def_total_blocks", "def_shots_blocked", "def_shots_on_target_blocked",
"def_passes_blocked", "def_interceptions", "def_tackles_plus_interceptions", "def_clearances", "def_errors")
l9 <- c("squad", "players_used", "possession_pct", "90s", "touches_total",
"touches_def_pen", "touches_def_third", "touches_middle_third", "touches_attacking_third",
"touches_attacking_pen", "touches_live_ball", "dribbles_successful", "dribbles_attempted",
"dribbles_successful_pct", "players_dribbled_past", "nutmegs", "carry_count",
"carry_distance", "carry_progressive_distance", "carry_progressive_count", "carry_into_attacking_third",
"carries_into_18box", "loose_balls_missed", "carry_lost", "targeted_by_pass", "passes_received",
"pass_received_pct", "progressive_passes_received")
l10 <- c("squad", "players_used", "avg_age", "matches_played", "minutes_played",
"minutes_played_per_match", "minutes_played_pct", "90s",
"starts", "starter_avg_minutes", "complete_matches", "subs_used", "sub_avg_time",
"unused_subs", "points_per_match", "goals", "goals_against",
"goal_difference", "goal_difference_per90", "expected_goals",
"expected_goals_against", "expected_goal_difference", "expected_goal_difference_per90")
l11 <- c("squad", "players_used", "90s", "yellow_cards", "red_cards",
"second_yellow_cards", "fouls_committed", "fouls_drawn", "offsides",
"crosses", "interceptions", "tackles_won", "penalties_won",
"penalties_conceded", "own_goals", "loose_ball_recoveries", "aerials_won",
"aerials_lost", "aerial_win_pct")
final_names <- c(l1,l2,l3,l4,l5,l6,l7,l8,l9,l10,l11)
names(final) <- final_names
final <-  final[!duplicated(colnames(final))]
final[2:216]<- sapply(final[2:216], gsub, pattern=",", replacement="")
suppressWarnings({final[2:216] <- sapply(final[2:216],as.numeric)})
final <- tibble::add_column(final, season = season, .before = 2)
final$season <- season
total <- dplyr::bind_rows(total,final)
Sys.sleep(1)
}
oldValue <- c("Atlanta","Chicago","Colorado","Columbus","Houston","Miami","Minnesota"
,"Montreal","Nashville","New England","NY Red Bulls","NYCFC",
"Orlando City","Philadelphia","Portland","San Jose","Seattle","Sporting KC",
"Vancouver","KC Wizards","MetroStars","Dallas","KC Wiz")
newValue <- c("Atlanta United FC","Chicago Fire FC","Colorado Rapids","Columbus Crew SC",
"Houston Dynamo","Inter Miami CF","Minnesota United FC","CF Montreal","Nashville SC",
"New England Revolution","New York Red Bulls","New York City FC",
"Orlando City SC","Philadelphia Union","Portland Timbers","San Jose Earthquakes",
"Seattle Sounders FC","Sporting Kansas City","Vancouver Whitecaps FC","Sporting Kansas City",
"New York Red Bulls","FC Dallas","Sporting Kansas City")
suppressWarnings({total$squad <- plyr::mapvalues(total$squad, oldValue, newValue)})
total$squad <- ifelse((total$squad == "Inter Miami CF") & (total$season < 2019),"defunct Miami",total$squad)
return(total)
}
team <- team_stats()
devtools::document()
devtools::document()
devtools::document()
library(devtools)
install_github("ryang73/rMLS")
team <- rMLS::team_stats()
View(team)
library(leaps)
install.packages('leaps')
library(plyr)
library(tidyverse)
library(EloRating)
library(faraway)
library(leaps)
games <- rMLS::fixtures()
games$year <- lubridate::year(games$Date)
unique(games$Home)
unique(games$Away)
oldValue <- c("KC Wiz","KC Wizards","Dallas","MetroStars","Montreal","CF Montréal")
newValue <- c("Sporting KC","Sporting KC","FC Dallas","NY Red Bulls","CF Montreal","CF Montreal")
suppressWarnings({games$Home <- plyr::mapvalues(games$Home, oldValue, newValue)})
suppressWarnings({games$Away <- plyr::mapvalues(games$Away, oldValue, newValue)})
games$Home <- ifelse((games$Home == "Miami") & (games$Date > '2020-01-01'),"Inter Miami",games$Home)
games$Away <- ifelse((games$Away == "Miami") & (games$Date > '2020-01-01'),"Inter Miami",games$Away)
total <- tibble::tibble()
for(i in 1996:2020){
g <- arrange(games,Date)
g <- g %>% filter(year == i)
g$winner <- ifelse(g$home_score > g$away_score,g$Home,g$Away)
g$loser <- ifelse(g$home_score > g$away_score,g$Away,g$Home)
g$Draw <- ifelse(g$home_score == g$away_score,TRUE,FALSE)
if (i == 1996) {
res <- EloRating::elo.seq(winner = g$winner, loser = g$loser,draw = g$Draw, Date = g$Date, runcheck = TRUE,k = 5.075,startvalue = 1000)
best <- optimizek(res,krange = c(0, 25))$best[[1]]
res <- EloRating::elo.seq(winner = g$winner, loser = g$loser,draw = g$Draw, Date = g$Date, runcheck = TRUE,k = 5.075,startvalue = 1000)
} else {
res <- EloRating::elo.seq(winner = g$winner, loser = g$loser,draw = g$Draw, Date = g$Date, runcheck = TRUE,k = 5.075,startvalue = vec)
best <- optimizek(res,krange = c(2, 25))$best[[1]]
res <- EloRating::elo.seq(winner = g$winner, loser = g$loser,draw = g$Draw, Date = g$Date, runcheck = TRUE,k = 5.075,startvalue = vec)
}
print(paste("Correct for",i,":",round(EloRating::correctly_predicted(res)$prop,3)))
g$home_elo <- extract_elo(res, extractdate = g$Date, IDs = g$Home)
g$away_elo <- extract_elo(res, extractdate = g$Date, IDs = g$Away)
ext <- EloRating::extract_elo(res)
ext2 <- ifelse(ext > 1000, (ext-1000)*.67+1000,1000 - (1000-ext)*.67)
t <- games %>% filter(year == i+1)
uno <- data.frame(Team=unique(t$Home))
dos <- data.frame(Team=ext2)
dos <- rownames_to_column(dos)
tri <- left_join(uno,dos,by=c('Team' = 'rowname'))
bot <- min(tri$Team.y,na.rm=T)
tri$Team.y <- ifelse(is.na(tri$Team.y),1000,tri$Team.y)
vec <- c(tri$Team.y)
names(vec) <- tri$Team
startvals <- createstartvalues(ranks = vec,shape=0.3)
total <- dplyr::bind_rows(total,g)
print(paste(i,"is done"))
}
r2 <- total %>% pivot_longer(cols = c(Home,Away), names_to = "Location", values_to = "Team")
r2 <- r2 %>% pivot_longer(cols = c(home_elo,away_elo), names_to = "Side", values_to = "Elo")
r2$Location <- tolower(r2$Location)
r2$indicator <- ifelse((grepl("home", r2$Side, fixed = TRUE))&(grepl("home", r2$Location, fixed = TRUE)),1,0)
r2$indicator <- ifelse((grepl("away", r2$Side, fixed = TRUE))&(grepl("away", r2$Location, fixed = TRUE)),1,r2$indicator)
r2 <- r2 %>% filter(indicator == 1)
r2 <- r2 %>% select(Date,Team,Elo)
ggplot(data=r2,aes(x=Date,y=Elo,color=Team)) + geom_line()
for(i in unique(r2$Team)){
teamplot <- r2 %>% filter(Team== i)
plot <- ggplot() +
geom_line(aes(Date, Elo, group = Team), data = r2, colour = alpha("grey", 0.7)) +
geom_line(aes(Date, Elo, colour = Team), data = teamplot)
print(plot)
}
total$regular_season <- ifelse(total$Round == "Regular Season",1,0)
total$neutral_venue <- ifelse((grepl("Neutral",total$Venue))|(total$Venue == "ESPN Wide World of Sports Complex"),1,0)
total$Attendance <- ifelse(is.na(total$Attendance),0,total$Attendance)
total$weekday <- ifelse(total$Day %in% c('Fri','Sat','Sun'),0,1)
total$home_timeid <- paste0(total$Home,total$Date)
total$away_timeid <- paste0(total$Away,total$Date)
df <- r2 %>%
group_by(Team) %>%
arrange(Date) %>%
mutate(rest = Date - lag(Date, default = first(Date))) %>%
mutate(timeid = paste0(Team,Date))
total <- left_join(total,select(df,Team,timeid,rest),by=c("home_timeid" = "timeid"),suffix = c("", "_home"))
total <- left_join(total,select(df,Team,timeid,rest),by=c("away_timeid" = "timeid"),suffix = c("", "_away"))
total <- select(total, -home_timeid,-away_timeid,-Team,-Team_away)
total <- rename(total,c("rest_home"="rest"))
total$rest_home <- ifelse(total$rest_home > 30, 30,total$rest_home)
total$rest_away <- ifelse(total$rest_away > 30, 30,total$rest_away)
total$rest_home <- ifelse(total$rest_home == 0, 30,total$rest_home)
total$rest_away <- ifelse(total$rest_away == 0, 30,total$rest_away)
total$short_rest_home <- ifelse(total$rest_home <= 5, 1,0)
total$regular_rest_home <- ifelse((total$rest_home >= 6)&(total$rest_home <= 9), 1,0)
total$long_rest_home <- ifelse(total$rest_home >= 10, 1,0)
total$short_rest_away <- ifelse(total$rest_away <= 5, 1,0)
total$regular_rest_away <- ifelse((total$rest_away >= 6)&(total$rest_away <= 9), 1,0)
total$long_rest_away <- ifelse(total$rest_away >= 10, 1,0)
total$diff <- total$home_elo - total$away_elo
total$home_winner <- ifelse(total$home_score > total$away_score,TRUE,FALSE)
total$away_winner <- ifelse(total$home_score < total$away_score,TRUE,FALSE)
mod <- lm(data=total,Draw~diff)
summary(mod)
total$fit_draw <- round(mod$fitted.values,2)
mod2 <- lm(data=total,home_winner~diff+regular_season+neutral_venue+rest_home*rest_away)
summary(mod2)
total$fit_home <- round(mod2$fitted.values,2)
mod3 <- lm(data=total,away_winner~diff)
total$fit_away <- round(mod3$fitted.values,2)
require(leaps)
b <- regsubsets(home_winners~.,data=total)
b <- regsubsets(home_winner~.,data=total)
names(total)
test_df <- select(total,Day,Date,Attendance,Referee,Round,year,home_elo,away_elo,regular_season,neutral_venue,short_rest_away,short_rest_home)
b <- regsubsets(home_winner~.,data=test_df)
test_df <- select(total,home_winner,Day,Date,Attendance,Referee,Round,year,home_elo,away_elo,regular_season,neutral_venue,short_rest_away,short_rest_home)
b <- regsubsets(home_winner~.,data=test_df)
rs <- summary(b)
View(test_df)
test_df <- select(total,home_winner,Day,Attendance,Referee,Round,year,home_elo,away_elo,regular_season,neutral_venue,short_rest_away,short_rest_home)
require(leaps)
b <- regsubsets(home_winner~.,data=test_df)
test_df <- select(total,home_winner,Day,Attendance,Round,year,home_elo,away_elo,regular_season,neutral_venue,short_rest_away,short_rest_home)
require(leaps)
b <- regsubsets(home_winner~.,data=test_df)
b <- regsubsets(home_winner~.,data=test_df,really.big=T)
rs <- summary(b)
rs$which
AIC <- 50*log(rs$rss/50) + (2:8)*2 > plot(AIC ~ I(1:7), ylab="AIC", xlab="Number of Predictors")
AIC <- 50*log(rs$rss/50) + (2:8)*2
rs$rss
(2:8
)
AIC <- 50*log(rs$rss/50) + (2:11)*2
AIC <- 50*log(rs$rss/50) + (1:11)*2
rs$which
t <- rs$which
AIC <- 50*log(rs$rss/50) + (2:54)*2
View(t)
test_df <- select(total,home_winner,Day,Attendance,year,home_elo,away_elo,regular_season,neutral_venue,short_rest_away,short_rest_home)
require(leaps)
b <- regsubsets(home_winner~.,data=test_df,really.big=T)
rs <- summary(b)
t <- rs$which
AIC <- 50*log(rs$rss/50) + (2:15)*2
rs$which
50*log(rs$rss/50)
AIC <- 50*log(rs$rss/50) + (2:8)*2
AIC <- 50*log(rs$rss/50) + (2:8)*2
50*log(rs$rss/50)
AIC <- 50*log(rs$rss/50) + (2:9)*2
plot(AIC ~ I(1:8), ylab="AIC", xlab="Number of Predictors")
plot(2:9,rs$adjr2,xlab="No. of Parameters",ylab="Adjusted R-square")
which.max(rs$adjr2)
plot(2:9,rs$cp,xlab="No. of Parameters",ylab="Cp Statistic")
abline(0,1)
lmod <- lm(home_winner~.,data=test_df, data=statedata)
lmod <- lm(home_winner~.,data=test_df)
step(lmod)
h <- lm.influence(lmod)$hat
h
stripchart(data.frame(scale(test_df)), method ="jitter", las=2, vertical=TRUE)
stripchart(data.frame(scale(test_df)), method ="jitter", las=2, vertical=TRUE,na.rm=T)
lmod <- lm(home_winner~.,data=test_df)
step(lmod)
automod <- lm(formula = home_winner ~ home_elo + away_elo + regular_season +
neutral_venue, data = test_df)
summary(automod)
